#
# Workflow engine database connection settings
#
database.workflowengine.url=jdbc:postgresql://localhost:5432/twe-example
database.workflowengine.username=twe-example
database.workflowengine.password=twe-example
database.workflowengine.schema=engine

#
# Workflow engine is enabled and during Spring Framework bootup the lifecycle services will be started and the engine will start working
#
workflowengine.enabled=true

#
# This parameter sets the Hazelcast instance name, so that the same instance can be accessed by Hazelcast.getHazelcastInstanceByName(...). 
# If you start your own Hazelcast instance with this name before TWE starts up, then your instance will be automatically used by the work queue.
#
# default: telekomWorkflowEngineHazelcast
#
workflowengine.cluster.hazelcast.name=

#
# This parameter is used as the Hazelcast cluster group name. It is also used to group workflow instances into groups. This leverages several clusters to run against one database (e.g. a cluster for every developer and a test instance and a prelive instance).
#
workflowengine.cluster.name=main

#
# These parameters are used for Hazelcasts cluster member auto-detection. Their default values are only suitable for a one node cluster in a development environment and are not suitable for production purposes. An explanation on the concept of multicasts can be found at http://www.tldp.org/HOWTO/Multicast-HOWTO-2.html.
#
# default: HC multicast group default "224.2.2.3"
#
workflowengine.cluster.multicast.group=
#
# default: HC multicast port default 54327
#
workflowengine.cluster.multicast.port=
#
# default: 0, which means multicasts are restricted to the same host
#
workflowengine.cluster.multicast.ttl=

#
# This parameter is used as name when indicating which cluster node is currently executing a workflow instance as described in the SQL statements above.
#
# default: the machine's hostname
#
workflowengine.node.name=

#
# Must be a value less than workflowengine.heartbeat.maximumPauseSeconds.
# Used as interval in seconds to run health check:
#     * Update node's heart beat field to current date (see database table and field node.heartbeat)
#     * If master:
#         o Refresh locks expire time (sets the lock expire time to current time + workflowengine.heartbeat.maximumPauseSeconds)
#         o Find other nodes that are did not have a heartbeat for longer than workflowengine.heartbeat.maximumPauseSeconds and mark their status as failed
#     * If slave:
#         o Test whether lock has expired and attempt to acquire it
#     * If master: Run recovery
#
workflowengine.heartbeat.intervalSeconds=60

#
# Must be a value greather than workflowengine.heartbeat.intervalSeconds.
# Used as interval in seconds
#     * to declare a node as FAILED if it is in ENALBED state but did not have a heartbeat in the given interval
#     * that the master lock is valid (afterwards it expires)
#
# default: 600
#
workflowengine.heartbeat.maximumPauseSeconds=600

#
# The maximum time a consumer is granted to update a workflow instance's node_name field after taking a work unit from the queue.
#
workflowengine.maximumNodeAssignementTimeSeconds=15

#
# The threshold time limit, if the regular health check finds that there are workflow instances that are in the locked state without updates (meaning that a
# node is executing some work item for this instance) for longer than this time, then an ERROR is logged to draw attention to potentially stuck workflows.
#
# NB! The workflow instance execution itself is NOT affected by this mechanism, just logging.
#
workflowengine.workItemExecutionTimeWarnSeconds=3600

#
# The interval in seconds after which the poller attempts to find new work units.
#
# default: 10
#
workflowengine.producer.intervalSeconds=10

#
# default: 8
#
workflowengine.consumer.threads=8

#
# The Spring application context file for plugins. The context is started when the engine starts and closed when it shuts down. It is used to
#     * resolve beans by name during call and callAsync executions,
#     * find listeners to engine events,
#     * find workflow definitions.
#
workflowengine.pluginApplicationContextFile=example-plugin-context.xml

#
# Determines whether the engine is deployed in development mode (as opposed to production mode). It is used to
#     * whether workflow definitions are reloaded before every usage. JRebel is required in order to fully benefit from this feature.
#
workflowengine.developmentMode=false

#
# Environment name, will be displayed (when not empty) in web console after application name
#
workflowengine.environment=DEV

#
# Is workflow exception notification service enabled (true/false). When enabled, then in case of exception in most critical engine components an email is sent.
# Email is sent at most once per cluster node in every workflowengine.exception.mail.notification.interval.minutes minutes.
#
workflowengine.exception.mail.notification.enabled=false

#
# Interval in minutes to specify the minimum time between cluster node 2 exception notification emails
#
# default: 15
#
workflowengine.exception.mail.notification.intervalMinutes=60

#
# Used in exception mail subject to indicate from which environment mail is sent
#
workflowengine.exception.mail.environment=

workflowengine.exception.mail.host=
workflowengine.exception.mail.port=25
workflowengine.exception.mail.username=
workflowengine.exception.mail.password=
workflowengine.exception.mail.from=
workflowengine.exception.mail.recipients=

#
# By default workflow engine console is deployed to root path. If it is deployed as a secondary servlet, this prefix denotes console servlet mapping prefix
#
# An example: /twe
#
workflowengine.console.mapping.prefix=

#
# Determines if the header logo and navigation links act as a stand-alone web app (default, false), or as embedded web screens (true).
#
workflowengine.embeddedNavigationMode=false
